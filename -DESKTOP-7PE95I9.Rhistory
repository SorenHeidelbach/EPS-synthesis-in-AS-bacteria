legend.position = "top")
ggbiplot(PCA_model, choices = 1:2, group = as.character(py$ms$labels_)) +
scale_color_manual(name="Variety", values=c("orange", "purple", "green")) +
scale_shape_manual(name="Variety", values=c(17:19)) +
geom_point(aes(colour=as.character(py$ms$labels_), shape=as.character(py$ms$labels_)), size = 3) +
theme(legend.direction ="horizontal",
legend.position = "top")
ggbiplot(PCA_model, choices = 1:2, group = as.character(py$ms$labels_)) +
scale_color_manual(name="Variety", values=c("orange", "purple", "green")) +
scale_shape_manual(name="Variety", values=c(1:3)) +
geom_point(aes(colour=as.character(py$ms$labels_), shape=as.character(py$ms$labels_)), size = 3) +
theme(legend.direction ="horizontal",
legend.position = "top")
ggbiplot(PCA_model, choices = 1:2, group = as.character(py$ms$labels_)) +
scale_color_manual(name="Variety", values=c("orange", "purple", "green")) +
scale_shape_manual(name="Variety", values=c(1:13)) +
geom_point(aes(colour=as.character(py$ms$labels_), shape=as.character(py$ms$labels_)), size = 3) +
theme(legend.direction ="horizontal",
legend.position = "top")
ggbiplot(PCA_model, choices = 1:2, group = as.character(py$ms$labels_)) +
geom_point(aes(colour=as.character(py$ms$labels_), shape=as.character(py$ms$labels_)), size = 3) +
theme(legend.direction ="horizontal",
legend.position = "top")
ggbiplot(PCA_model, choices = 1:2, group = as.character(py$ms$labels_)) +
geom_point(aes(colour=as.character(py$ms$labels_), shape=as.character(py$ms$labels_)), size = 2)
View(PCA_pre_proces)
geom_point(aes(colour=as.character(py$ms$labels_), shape=PCA_pre_proces$in_operon, size = 2)
ggbiplot(PCA_model, choices = 1:2, group = as.character(py$ms$labels_)) +
geom_point(aes(colour=as.character(py$ms$labels_), shape=PCA_pre_proces$in_operon, size = 2))
ggbiplot(PCA_model, choices = 1:2, group = as.character(py$ms$labels_)) +
geom_point(aes(colour=as.character(py$ms$labels_), shape=PCA_pre_proces$in_operon, size = 2))
ggbiplot(PCA_model, choices = 1:2, group = as.character(py$ms$labels_)) +
geom_point(aes(colour=as.character(py$ms$labels_), shape=PCA_pre_proces$in_operon), size = 2)
ggbiplot(PCA_model, choices = 1:2, group = as.character(py$ms$labels_)) +
geom_point(aes(colour=as.character(py$ms$labels_), shape=PCA_pre_proces$in_operon), size = 2) +
theme_bw()
ggbiplot(PCA_model, choices = 1:2, group = as.character(py$ms$labels_)) +
geom_point(aes(colour=as.character(py$ms$labels_), shape=PCA_pre_proces$in_operon), size = 2) +
theme_bw() +
scale_shape(c(1,2))
ggbiplot(PCA_model, choices = 1:2, group = as.character(py$ms$labels_)) +
geom_point(aes(colour=as.character(py$ms$labels_), shape=PCA_pre_proces$in_operon), size = 2) +
theme_bw() +
scale_shape(c(1,3))
ggbiplot(PCA_model, choices = 1:2, group = as.character(py$ms$labels_)) +
geom_point(aes(colour=as.character(py$ms$labels_), shape=PCA_pre_proces$in_operon), size = 2) +
theme_bw(solid = FALSE) +
scale_shape(c(1,3))
ggbiplot(PCA_model, choices = 1:2, group = as.character(py$ms$labels_)) +
geom_point(aes(colour=as.character(py$ms$labels_), shape=PCA_pre_proces$in_operon), size = 2) +
theme_bw() +
scale_shape(solid = FALSE)
ggplot(df_shapes, aes(0, 0, shape = shape)) +
geom_point(aes(shape = shape), size = 5, fill = 'red') +
scale_shape_identity() +
facet_wrap(~shape) +
theme_void()
# Show a list of available shapes
df_shapes <- data.frame(shape = 0:24)
ggplot(df_shapes, aes(0, 0, shape = shape)) +
geom_point(aes(shape = shape), size = 5, fill = 'red') +
scale_shape_identity() +
facet_wrap(~shape) +
theme_void()
ggbiplot(PCA_model, choices = 1:2, group = as.character(py$ms$labels_)) +
geom_point(aes(colour=as.character(py$ms$labels_), shape=PCA_pre_proces$in_operon), size = 2) +
theme_bw() +
scale_shape_manual(solid = FALSE)
ggbiplot(PCA_model, choices = 1:2, group = as.character(py$ms$labels_)) +
geom_point(aes(colour=as.character(py$ms$labels_), shape=PCA_pre_proces$in_operon), size = 2) +
theme_bw() +
scale_shape_manual(c(1,7))
ggbiplot(PCA_model, choices = 1:2, group = as.character(py$ms$labels_)) +
geom_point(aes(colour=as.character(py$ms$labels_), shape=PCA_pre_proces$in_operon), size = 2) +
theme_bw() +
scale_shape_manual(values = c(1,7))
ggbiplot(PCA_model, choices = 1:2, group = as.character(py$ms$labels_)) +
geom_point(aes(colour=as.character(py$ms$labels_), shape=PCA_pre_proces$in_operon), size = 2) +
theme_bw() +
scale_shape_manual(values = c(4,20))
ggbiplot(PCA_model, choices = 1:2, group = as.character(py$ms$labels_)) +
geom_point(aes(colour=as.character(py$ms$labels_), shape=PCA_pre_proces$in_operon), size = 2) +
theme_bw() +
scale_shape_manual(values = c(20,4))
ggbiplot(PCA_model, choices = 1:2) +
geom_point(aes(colour=as.character(py$ms$labels_), shape=PCA_pre_proces$in_operon), size = 2) +
theme_bw() +
scale_shape_manual(values = c(20,4))
ggbiplot(PCA_model, choices = 1:2, var.scale = 1) +
geom_point(aes(colour=as.character(py$ms$labels_), shape=PCA_pre_proces$in_operon), size = 2) +
theme_bw() +
scale_shape_manual(values = c(20,4))
ggbiplot(PCA_model, choices = 1:2, obs.scale = 1) +
geom_point(aes(colour=as.character(py$ms$labels_), shape=PCA_pre_proces$in_operon), size = 2) +
theme_bw() +
scale_shape_manual(values = c(20,4))
ggbiplot(PCA_model, choices = 1:2, labels.size =  1) +
geom_point(aes(colour=as.character(py$ms$labels_), shape=PCA_pre_proces$in_operon), size = 2) +
theme_bw() +
scale_shape_manual(values = c(20,4))
ggbiplot(PCA_model, choices = 1:2, labels.size = 0.1) +
geom_point(aes(colour=as.character(py$ms$labels_), shape=PCA_pre_proces$in_operon), size = 2) +
theme_bw() +
scale_shape_manual(values = c(20,4))
ggplot(PCA_data_labels, aes(x = PC2, y = PC3, col = mean_shift)) +
geom_point(aes(colour=as.character(py$ms$labels_), shape=PCA_pre_proces$in_operon), size = 2) +
theme_bw() +
scale_shape_manual(values = c(20,4))
ggplot(PCA_data_labels, aes(x = PC2, y = PC3, col = mean_shift)) +
geom_point(aes(colour=as.character(py$ms$labels_), shape=PCA_pre_proces$in_operon), size = 2) +
theme_bw() +
scale_shape_manual(values = c(19,4))
ggplot(PCA_data_labels, aes(x = PC2, y = PC3, col = mean_shift)) +
geom_point(aes(colour=as.character(py$ms$labels_), shape=PCA_pre_proces$in_operon), size = 2) +
theme_bw() +
scale_shape_manual(values = c(19,4),  alpha = 0.6)
ggplot(PCA_data_labels, aes(x = PC2, y = PC3, col = mean_shift)) +
geom_point(aes(colour=as.character(py$ms$labels_), shape=PCA_pre_proces$in_operon), size = 2, ,  alpha = 0.6) +
theme_bw() +
scale_shape_manual(values = c(19,4))
ggplot(PCA_data_labels, aes(x = PC2, y = PC3, col = mean_shift)) +
geom_point(aes(colour=as.character(py$ms$labels_), shape=PCA_pre_proces$in_operon), size = 2,  alpha = 0.6) +
theme_bw() +
scale_shape_manual(values = c(19,4))
ggplot(PCA_data_labels, aes(x = PC1, y = PC3, col = mean_shift)) +
geom_point(aes(colour=as.character(py$ms$labels_), shape=PCA_pre_proces$in_operon), size = 2, alpha = 0.6) +
theme_bw() +
scale_shape_manual(values = c(19,4))
ggplot(PCA_data_labels, aes(x = PC1, y = PC2, col = mean_shift)) +
geom_point(aes(colour=as.character(py$ms$labels_), shape=PCA_pre_proces$in_operon), size = 2, alpha = 0.6) +
theme_bw() +
scale_shape_manual(values = c(19,4))
ggplot(PCA_data_labels, aes(x = PC1, y = PC2, col = mean_shift)) +
geom_point(aes(colour=as.character(py$ms$labels_), shape=PCA_pre_proces$size_uniq), size = 2, alpha = 0.6) +
theme_bw() +
scale_shape_manual(values = c(19,4))
PCA_pre_proces$size_uniq
as.integer(PCA_pre_proces$size_uniq)
ggplot(PCA_data_labels, aes(x = PC1, y = PC2, col = mean_shift)) +
geom_point(aes(colour=as.character(py$ms$labels_), shape=as.integer(PCA_pre_proces$size_uniq)), size = 2, alpha = 0.6) +
theme_bw() +
scale_shape_manual(values = c(19,4))
ggplot(PCA_data_labels, aes(x = PC1, y = PC2, col = mean_shift)) +
geom_point(aes(colour=as.character(py$ms$labels_), shape=as.integer(PCA_pre_proces$size_uniq)), size = 2, alpha = 0.6) +
theme_bw() +
scale_shape_manual(values = c(19,4,5,6))
as.integer(PCA_pre_proces$size_uniq)
ggplot(PCA_data_labels, aes(x = PC2, y = PC3, col = mean_shift)) +
geom_point(alpha = 0.3) +
theme_bw() +
ggtitle (glue("{query}, colored by mean shift clustering (bandwith selected with quantile = 0.3)"))
PCA_data_labels
PCA_data_labels <- PCA_data %>%
as_tibble() %>%
cbind(as.factor(py$ms$labels_)) %>%
cbind(PCA_pre_proces) %>%
setNames(c("PC1", "PC2", "PC3", "mean_shift"))
View(PCA_data_labels)
PCA_data_labels <- PCA_data %>%
as_tibble() %>%
cbind(as.factor(py$ms$labels_)) %>%
cbind(PCA_pre_proces)
View(PCA_data_labels)
colnames(PCA_data_labels)[4] <- "labels"
View(PCA_data_labels)
ggplot(PCA_data_labels, aes(x = PC2, y = PC3, col = size_uniq)) +
geom_point(aes(), alpha = 0.3) +
theme_bw() +
ggtitle (glue("{query}, colored by mean shift clustering (bandwith selected with quantile = 0.3)"))
ggplot(PCA_data_labels, aes(x = PC2, y = PC3, col = as.character(size_uniq))) +
geom_point(aes(), alpha = 0.3) +
theme_bw() +
ggtitle (glue("{query}, colored by mean shift clustering (bandwith selected with quantile = 0.3)"))
ggplot(PCA_data_labels, aes(x = PC2, y = PC3, col = as.character(size_uniq), shape in_operon)) +
geom_point(aes(), alpha = 0.3) +
theme_bw() +
ggtitle (glue("{query}, colored by mean shift clustering (bandwith selected with quantile = 0.3)"))
ggplot(PCA_data_labels, aes(x = PC2, y = PC3, col = as.character(size_uniq), shape = in_operon)) +
geom_point(aes(), alpha = 0.3) +
theme_bw() +
ggtitle (glue("{query}, colored by mean shift clustering (bandwith selected with quantile = 0.3)"))
ggplot(PCA_data_labels, aes(x = PC1, y = PC2, col = as.character(size_uniq), shape = in_operon)) +
geom_point(aes(), alpha = 0.3) +
theme_bw() +
ggtitle (glue("{query}, colored by mean shift clustering (bandwith selected with quantile = 0.3)"))
ggplot(PCA_data_labels, aes(x = PC1, y = PC2, col = as.character(size_uniq), shape = as.character(size_uniq))) +
geom_point(aes(), alpha = 0.3) +
theme_bw() +
ggtitle (glue("{query}, colored by mean shift clustering (bandwith selected with quantile = 0.3)"))
ggplot(PCA_data_labels, aes(x = PC1, y = PC2, col = labels, shape = as.character(size_uniq))) +
geom_point(aes(), alpha = 0.3) +
theme_bw() +
ggtitle (glue("{query}, colored by mean shift clustering (bandwith selected with quantile = 0.3)"))
ggplot(PCA_data_labels, aes(x = PC1, y = PC2, col = labels, shape = as.character(size_uniq))) +
geom_point(aes(), alpha = 0.3) +
scale_shape_manual(values = c(19, 4, 2, 3))
ggplot(PCA_data_labels, aes(x = PC1, y = PC2, col = labels, shape = as.character(size_uniq))) +
geom_point(aes(), alpha = 0.3) +
scale_shape_manual(values = c(4, 17, 18, 19))
ggplot(PCA_data_labels, aes(x = PC1, y = PC2, col = labels, shape = as.character(size_uniq))) +
geom_point(aes(), alpha = 0.3) +
scale_shape_manual(values = c(4, 17, 18, 19)) +
theme_bw() +
ggtitle (glue("{query}, colored by mean shift clustering (bandwith selected with quantile = 0.3)"))
reticulate::repl_python()
PCA_data = r.PCA_data
bw = estimate_bandwidth(PCA_data, quantile = 0.4, n_samples = 500)
ms = MeanShift(bandwidth = bw, bin_seeding = True)
ms.fit(PCA_data)
quit
PCA_data_labels <- PCA_data %>%
as_tibble() %>%
cbind(as.factor(py$ms$labels_)) %>%
cbind(PCA_pre_proces)
colnames(PCA_data_labels)[4] <- "labels"
ggplot(PCA_data_labels, aes(x = PC1, y = PC2, col = labels, shape = as.character(size_uniq))) +
geom_point(aes(), alpha = 0.3) +
scale_shape_manual(values = c(4, 17, 18, 19)) +
theme_bw() +
ggtitle (glue("{query}, colored by mean shift clustering (bandwith selected with quantile = 0.3)"))
reticulate::repl_python()
bw = estimate_bandwidth(PCA_data, quantile = 0.45, n_samples = 500)
ms = MeanShift(bandwidth = bw, bin_seeding = True)
ms.fit(PCA_data)
quit
```{r}
PCA_data_labels <- PCA_data %>%
as_tibble() %>%
cbind(as.factor(py$ms$labels_)) %>%
cbind(PCA_pre_proces)
colnames(PCA_data_labels)[4] <- "labels"
ggplot(PCA_data_labels, aes(x = PC1, y = PC2, col = labels, shape = as.character(size_uniq))) +
geom_point(aes(), alpha = 0.3) +
scale_shape_manual(values = c(4, 17, 18, 19)) +
theme_bw() +
ggtitle (glue("{query}, colored by mean shift clustering (bandwith selected with quantile = 0.3)"))
reticulate::repl_python()
PCA_data = r.PCA_data
bw = estimate_bandwidth(PCA_data, quantile = 0.15, n_samples = 500)
ms = MeanShift(bandwidth = bw, bin_seeding = True)
ms.fit(PCA_data)
quit
PCA_data_labels <- PCA_data %>%
as_tibble() %>%
cbind(as.factor(py$ms$labels_)) %>%
cbind(PCA_pre_proces)
colnames(PCA_data_labels)[4] <- "labels"
ggplot(PCA_data_labels, aes(x = PC1, y = PC2, col = labels, shape = as.character(size_uniq))) +
geom_point(aes(), alpha = 0.3) +
scale_shape_manual(values = c(4, 17, 18, 19)) +
theme_bw() +
ggtitle (glue("{query}, colored by mean shift clustering (bandwith selected with quantile = 0.3)"))
ggplot(PCA_data_labels, aes(x = PC1, y = PC2, col = labels, shape = as.character(size_uniq))) +
geom_point(aes(), alpha = 0.3) +
scale_shape_manual(values = c(4, 17, 18, 19)) +
theme_bw() +
ggtitle (glue("{query}, colored by mean shift clustering (bandwith selected with quantile = 0.3)"))
reticulate::repl_python()
bw = estimate_bandwidth(PCA_data, quantile = 0.5, n_samples = 500)
ms = MeanShift(bandwidth = bw, bin_seeding = True)
ms.fit(PCA_data)
quit
```{r}
PCA_data_labels <- PCA_data %>%
as_tibble() %>%
cbind(as.factor(py$ms$labels_)) %>%
cbind(PCA_pre_proces)
colnames(PCA_data_labels)[4] <- "labels"
ggplot(PCA_data_labels, aes(x = PC1, y = PC2, col = labels, shape = as.character(size_uniq))) +
geom_point(aes(), alpha = 0.3) +
scale_shape_manual(values = c(4, 17, 18, 19)) +
theme_bw() +
ggtitle (glue("{query}, colored by mean shift clustering (bandwith selected with quantile = 0.3)"))
PCA_data_labels <- PCA_data %>%
as_tibble() %>%
cbind(as.factor(py$ms$labels_)) %>%
cbind(PCA_pre_proces)
colnames(PCA_data_labels)[4] <- "labels"
ggplot(PCA_data_labels, aes(x = PC1, y = PC2, col = labels, shape = as.character(size_uniq))) +
geom_point(aes(), alpha = 0.3) +
scale_shape_manual(values = c(4, 17, 18, 19)) +
theme_bw() +
ggtitle (glue("{query}, colored by mean shift clustering (bandwith selected with quantile = 0.3)"))
reticulate::repl_python()
ms = MeanShift(bandwidth = bw, bin_seeding = True)
ms.fit(PCA_data)
PCA_data = r.PCA_data
bw = estimate_bandwidth(PCA_data, quantile = 0.7, n_samples = 500)
quit
PCA_data_labels <- PCA_data %>%
as_tibble() %>%
cbind(as.factor(py$ms$labels_)) %>%
cbind(PCA_pre_proces)
colnames(PCA_data_labels)[4] <- "labels"
ggplot(PCA_data_labels, aes(x = PC1, y = PC2, col = labels, shape = as.character(size_uniq))) +
geom_point(aes(), alpha = 0.3) +
scale_shape_manual(values = c(4, 17, 18, 19)) +
theme_bw() +
ggtitle (glue("{query}, colored by mean shift clustering (bandwith selected with quantile = 0.3)"))
ggplot(PCA_data_labels, aes(x = PC1, y = PC2, col = labels, shape = as.character(size_uniq))) +
geom_point(aes(), alpha = 0.6) +
scale_shape_manual(values = c(4, 17, 18, 19)) +
theme_bw() +
ggtitle (glue("{query}, colored by mean shift clustering (bandwith selected with quantile = 0.3)"))
query <-  "gellan"
psi_id_filt <- read.delim(glue("./output/psi_percID_filt/{query}.tsv"))
psi_proxi_filt <- read.delim(glue("./output/psi_proxi_filt/{query}.tsv"))
PCA_pre_proces <-  psi_id_filt %>%
mutate(coverage = (end_target - start_target) / (end - start)/3,) %>%
group_by(operon) %>%
dplyr::summarize(
mean_bit = mean(Bit.score),
mean_cov = mean(coverage),
mean_perc_id = mean(Percent_identity),
size = length(coverage),
size_uniq = length(unique(Query_label)),
repetition = size_uniq/size
) %>%
merge(aggregate(Target_label ~ operon, data=psi_id_filt, head, 1), by="operon")  %>%
mutate(
in_operon = case_when(
Target_label %in% psi_proxi_filt$Target_label ~ "Proximity Filtration",
TRUE ~ "Removed"),
) %>%
filter(size > 0 & size < 15)
PCA_model <- PCA_pre_proces %>%
select(mean_bit, mean_cov, mean_perc_id, size_uniq, repetition) %>%
prcomp(scale. = TRUE, center = TRUE)
PCA_data = PCA_model$x[,c("PC1", "PC2", "PC3")]
ggbiplot(PCA_model, choices = 2:3, groups = as.character(PCA_pre_proces$size_uniq), alpha = 0.4) +
theme_bw() +
ggtitle(glue("{query}, colored by number of unique genes in operon"))
ggbiplot(PCA_model, choices = 1:2, groups = as.character(PCA_pre_proces$size_uniq), alpha = 0.4) +
theme_bw() +
ggtitle(glue("{query}, colored by number of unique genes in operon"))
kmeans_PCA <- kmeans(PCA_model$x, 2)
ggbiplot(PCA_model, choices = 2:3, groups = as.character(kmeans_PCA$cluster), alpha = 0.4) +
theme_bw() +
ggtitle(glue("{query}, colored by kmeans clustering, n = 2"))
reticulate::repl_python()
import numpy as np
from sklearn.cluster import MeanShift, estimate_bandwidth
from sklearn.datasets import make_blobs
# Importing PC1 and PC2
PCA_data = r.PCA_data
bw = estimate_bandwidth(PCA_data, quantile = 0.7, n_samples = 500)
ms = MeanShift(bandwidth = bw, bin_seeding = True)
ms.fit(PCA_data)
quit
PCA_data_labels <- PCA_data %>%
as_tibble() %>%
cbind(as.factor(py$ms$labels_)) %>%
cbind(PCA_pre_proces)
colnames(PCA_data_labels)[4] <- "labels"
ggplot(PCA_data_labels, aes(x = PC1, y = PC2, col = labels, shape = as.character(size_uniq))) +
geom_point(aes(), alpha = 0.6) +
scale_shape_manual(values = c(4, 17, 18, 19)) +
theme_bw() +
ggtitle (glue("{query}, colored by mean shift clustering (bandwith selected with quantile = 0.3)"))
ggplot(PCA_data_labels, aes(x = PC1, y = PC2, col = labels, shape = as.character(size_uniq))) +
geom_point(aes(), alpha = 0.6) +
scale_shape_manual(values = c(1:4, 16, 17, 18, 19)) +
theme_bw() +
ggtitle (glue("{query}, colored by mean shift clustering (bandwith selected with quantile = 0.3)"))
reticulate::repl_python()
bw = estimate_bandwidth(PCA_data, quantile = 0.4, n_samples = 500)
ms = MeanShift(bandwidth = bw, bin_seeding = True)
ms.fit(PCA_data)
quit
PCA_data_labels <- PCA_data %>%
as_tibble() %>%
cbind(as.factor(py$ms$labels_)) %>%
cbind(PCA_pre_proces)
colnames(PCA_data_labels)[4] <- "labels"
ggplot(PCA_data_labels, aes(x = PC1, y = PC2, col = labels, shape = as.character(size_uniq))) +
geom_point(aes(), alpha = 0.6) +
scale_shape_manual(values = c(1:4, 16, 17, 18, 19)) +
theme_bw() +
ggtitle (glue("{query}, colored by mean shift clustering (bandwith selected with quantile = 0.3)"))
ggplot(PCA_data_labels, aes(x = PC3, y = PC2, col = labels, shape = as.character(size_uniq))) +
geom_point(aes(), alpha = 0.6) +
scale_shape_manual(values = c(1:4, 16, 17, 18, 19)) +
theme_bw() +
ggtitle (glue("{query}, colored by mean shift clustering (bandwith selected with quantile = 0.3)"))
reticulate::repl_python()
bw = estimate_bandwidth(PCA_data, quantile = 0.3, n_samples = 500)
ms = MeanShift(bandwidth = bw, bin_seeding = True)
ms.fit(PCA_data)
quit
PCA_data_labels <- PCA_data %>%
as_tibble() %>%
cbind(as.factor(py$ms$labels_)) %>%
cbind(PCA_pre_proces)
colnames(PCA_data_labels)[4] <- "labels"
ggplot(PCA_data_labels, aes(x = PC3, y = PC2, col = labels, shape = as.character(size_uniq))) +
geom_point(aes(), alpha = 0.6) +
scale_shape_manual(values = c(1:4, 16, 17, 18, 19)) +
theme_bw() +
ggtitle (glue("{query}, colored by mean shift clustering (bandwith selected with quantile = 0.3)"))
ggplot(PCA_data_labels, aes(x = PC3, y = PC1, col = labels, shape = as.character(size_uniq))) +
geom_point(aes(), alpha = 0.6) +
scale_shape_manual(values = c(1:4, 16, 17, 18, 19)) +
theme_bw() +
ggtitle (glue("{query}, colored by mean shift clustering (bandwith selected with quantile = 0.3)"))
ggplot(PCA_data_labels, aes(x = PC2, y = PC3, col = labels, shape = size_uniq)) +
geom_point(aes(), alpha = 0.6) +
scale_shape_manual(values = c(1:4, 16, 17, 18, 19)) +
theme_bw() +
ggtitle (glue("{query}, colored by mean shift clustering"))
PCA_data_labels <- PCA_data %>%
as_tibble() %>%
cbind(as.factor(py$ms$labels_)) %>%
cbind(PCA_pre_proces) %>%
mutate (size_uniq = as.character(size_uniq))
colnames(PCA_data_labels)[4] <- "labels"
ggplot(PCA_data_labels, aes(x = PC2, y = PC3, col = labels, shape = size_uniq)) +
geom_point(aes(), alpha = 0.6) +
scale_shape_manual(values = c(1:4, 16, 17, 18, 19)) +
theme_bw() +
ggtitle (glue("{query}, colored by mean shift clustering"))
dir.create("./figures/clustering")
ggsave(filename = glue("./figures/clustering/{query}_meanshift"),
ggplot(PCA_data_labels, aes(x = PC2, y = PC3, col = labels, shape = size_uniq)) +
geom_point(aes(), alpha = 0.6) +
scale_shape_manual(values = c(1:4, 16, 17, 18, 19)) +
theme_bw() +
ggtitle (glue("{query}, colored by mean shift clustering"))
)
ggsave(filename = glue("./figures/clustering/{query}_meanshift"),device = "pdf",
ggplot(PCA_data_labels, aes(x = PC2, y = PC3, col = labels, shape = size_uniq)) +
geom_point(aes(), alpha = 0.6) +
scale_shape_manual(values = c(1:4, 16, 17, 18, 19)) +
theme_bw() +
ggtitle (glue("{query}, colored by mean shift clustering"))
)
ggsave(filename = glue("./figures/clustering/{query}_meanshift.pdf"), device = "pdf",
ggplot(PCA_data_labels, aes(x = PC2, y = PC3, col = labels, shape = size_uniq)) +
geom_point(aes(), alpha = 0.6) +
scale_shape_manual(values = c(1:4, 16, 17, 18, 19)) +
theme_bw() +
ggtitle (glue("{query}, colored by mean shift clustering"))
)
library("here")
setwd(here::here())
dir.create("./data/raw", recursive = TRUE, showWarnings = FALSE)
dir.create("./data/processed", recursive = TRUE, showWarnings = FALSE)
if(!"gff.tsv" %in% list.files("./data/raw/")) {
if(!"gff_files_reduced_out" %in% list.files("./data/raw/")){
print("Download/move 'gff_files_reduced_out' folder to 'data/raw/'")
} else {
print('Please wait while gff.tsv is generated')
source("./scripts/generate_gff.R")
rm(gff)
}
}
if(!"magstats.tsv" %in% list.files("./data/raw/")) {
if(!"MAG_statistics_STABLEX_20200213.tsv" %in% list.files("./data/raw/")){
print("Download/move 'MAG_statistics_STABLEX_20200213.tsv' to 'data/raw/'")
} else {
source("./scripts/generate_magstats.R")
rm(magstats)
}
}
if(!"Query_figur.xlsx" %in% list.files("./data/raw/")) "Download/move 'Query_figur.xlsx' to data/raw/"
if(!"MGP1000_HQMAG1083_prot_db_split" %in% list.files("./data/raw/")) "Download/move 'MGP1000_HQMAG1083_prot_db_split' folder to data/raw/"
if(!"psiblast" %in% list.files("./data/raw/")) "Download 'psiblast' with psiblast results to data/raw/"
# The main proximity filtration pipeline
source("./scripts/proximity_filtration.R")
BiocManager::install("gggenes")
BiocManager::install("gggenes")
BiocManager::install("gggenes")
library("here")
setwd(here::here())
dir.create("./data/raw", recursive = TRUE, showWarnings = FALSE)
dir.create("./data/processed", recursive = TRUE, showWarnings = FALSE)
if(!"gff.tsv" %in% list.files("./data/raw/")) {
if(!"gff_files_reduced_out" %in% list.files("./data/raw/")){
print("Download/move 'gff_files_reduced_out' folder to 'data/raw/'")
} else {
print('Please wait while gff.tsv is generated')
source("./scripts/generate_gff.R")
rm(gff)
}
}
if(!"magstats.tsv" %in% list.files("./data/raw/")) {
if(!"MAG_statistics_STABLEX_20200213.tsv" %in% list.files("./data/raw/")){
print("Download/move 'MAG_statistics_STABLEX_20200213.tsv' to 'data/raw/'")
} else {
source("./scripts/generate_magstats.R")
rm(magstats)
}
}
if(!"Query_figur.xlsx" %in% list.files("./data/raw/")) "Download/move 'Query_figur.xlsx' to data/raw/"
if(!"MGP1000_HQMAG1083_prot_db_split" %in% list.files("./data/raw/")) "Download/move 'MGP1000_HQMAG1083_prot_db_split' folder to data/raw/"
if(!"psiblast" %in% list.files("./data/raw/")) "Download 'psiblast' with psiblast results to data/raw/"
# The main proximity filtration pipeline
source("./scripts/proximity_filtration.R")
install.packages("ggtet")
install.packages("ggtext")
# The main proximity filtration pipeline
source("./scripts/proximity_filtration.R")
install.packages("needs")
# The main proximity filtration pipeline
source("./scripts/proximity_filtration.R")
library("here")
setwd(here::here())
dir.create("./data/raw", recursive = TRUE, showWarnings = FALSE)
dir.create("./data/processed", recursive = TRUE, showWarnings = FALSE)
# The main proximity filtration pipeline
source("./scripts/proximity_filtration.R")
# The main proximity filtration pipeline
source("./scripts/proximity_filtration.R")
